#!/usr/bin/env python3
"""
Script de debug para verificar la configuraci√≥n del bot de Discord.
"""

import os
import sys
from dotenv import load_dotenv

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def check_discord_config():
    """Verifica la configuraci√≥n de Discord."""
    print("üîç Verificando configuraci√≥n de Discord...")
    
    # Cargar variables de entorno
    load_dotenv()
    
    # Verificar token
    token = os.getenv('DISCORD_BOT_TOKEN')
    if token:
        if token == 'tu_token_de_discord_aqui':
            print("‚ùå DISCORD_BOT_TOKEN no est√° configurado correctamente")
            print("   Debes reemplazar 'tu_token_de_discord_aqui' con tu token real")
            return False
        else:
            print("‚úÖ DISCORD_BOT_TOKEN est√° configurado")
            print(f"   Token: {token[:10]}...{token[-10:]}")
            return True
    else:
        print("‚ùå DISCORD_BOT_TOKEN no est√° configurado")
        return False

def check_other_vars():
    """Verifica otras variables de entorno."""
    print("\nüîç Verificando otras variables...")
    
    channel_id = os.getenv('DISCORD_CHANNEL_ID')
    if channel_id:
        print(f"‚úÖ DISCORD_CHANNEL_ID: {channel_id}")
    else:
        print("‚ö†Ô∏è DISCORD_CHANNEL_ID no configurado (opcional)")
    
    publish_hour = os.getenv('PUBLISH_HOUR', '09')
    publish_minute = os.getenv('PUBLISH_MINUTE', '00')
    print(f"‚úÖ Horario de publicaci√≥n: {publish_hour}:{publish_minute}")
    
    unsplash_key = os.getenv('UNSPLASH_ACCESS_KEY')
    if unsplash_key:
        print("‚úÖ UNSPLASH_ACCESS_KEY configurado")
    else:
        print("‚ö†Ô∏è UNSPLASH_ACCESS_KEY no configurado (opcional)")

def test_discord_connection():
    """Prueba la conexi√≥n con Discord."""
    print("\nüîç Probando conexi√≥n con Discord...")
    
    try:
        import discord
        from discord.ext import commands
        
        # Crear bot de prueba
        intents = discord.Intents.default()
        intents.message_content = True
        
        bot = commands.Bot(command_prefix='!', intents=intents)
        
        @bot.event
        async def on_ready():
            print(f"‚úÖ Bot conectado como: {bot.user}")
            print(f"‚úÖ Servidores: {len(bot.guilds)}")
            await bot.close()
        
        token = os.getenv('DISCORD_BOT_TOKEN')
        if token and token != 'tu_token_de_discord_aqui':
            import asyncio
            try:
                asyncio.run(bot.start(token))
            except discord.LoginFailure:
                print("‚ùå Error de autenticaci√≥n: Token inv√°lido")
                return False
            except Exception as e:
                print(f"‚ùå Error de conexi√≥n: {e}")
                return False
        else:
            print("‚ùå No se puede probar sin token v√°lido")
            return False
            
    except ImportError:
        print("‚ùå discord.py no est√° instalado")
        return False

if __name__ == "__main__":
    print("üöÄ Debug del Bot de Discord")
    print("=" * 40)
    
    # Verificar configuraci√≥n
    token_ok = check_discord_config()
    check_other_vars()
    
    if token_ok:
        test_discord_connection()
    
    print("\n" + "=" * 40)
    print("üìã Resumen:")
    if token_ok:
        print("‚úÖ Token configurado - Revisa los logs en Railway")
    else:
        print("‚ùå Configura el token en Railway Variables") 